# Generated by Django 2.0 on 2018-01-30 17:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Spieler',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('spieler_id', models.AutoField(primary_key=True, serialize=False)),
                ('nachname', models.CharField(max_length=45)),
                ('vorname', models.CharField(max_length=45)),
                ('punktzahl', models.IntegerField(blank=True, null=True)),
                ('email', models.CharField(max_length=254)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'managed': True,
                'db_table': 'spieler',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Gamemaster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spieler_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'managed': True,
                'db_table': 'gamemaster',
            },
        ),
        migrations.CreateModel(
            name='GamemasterVerwaltetSpot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datum', models.DateTimeField()),
                ('aktion', models.IntegerField(blank=True, null=True)),
                ('spieler_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'managed': True,
                'db_table': 'gamemaster_verwaltet_spot',
            },
        ),
        migrations.CreateModel(
            name='Medium',
            fields=[
                ('medium_id', models.AutoField(primary_key=True, serialize=False)),
                ('dateityp', models.CharField(max_length=5)),
                ('erstelldatum', models.DateTimeField()),
                ('link', models.CharField(max_length=255)),
                ('profilbild_flag', models.IntegerField()),
                ('spieler_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'managed': True,
                'db_table': 'medium',
            },
        ),
        migrations.CreateModel(
            name='Ort',
            fields=[
                ('ort_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('plz', models.CharField(max_length=5)),
            ],
            options={
                'managed': True,
                'db_table': 'ort',
            },
        ),
        migrations.CreateModel(
            name='Schwierigkeit',
            fields=[
                ('schwierigkeit_id', models.AutoField(primary_key=True, serialize=False)),
                ('punkte', models.IntegerField()),
                ('beschreibung', models.CharField(max_length=255)),
            ],
            options={
                'managed': True,
                'db_table': 'schwierigkeit',
            },
        ),
        migrations.CreateModel(
            name='SpielerBewertetSpot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bewertung', models.IntegerField()),
                ('datum', models.DateTimeField()),
                ('spieler_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'managed': True,
                'db_table': 'spieler_bewertet_spot',
            },
        ),
        migrations.CreateModel(
            name='SpielerEntdecktSpot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datum', models.DateTimeField()),
                ('spieler_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'managed': True,
                'db_table': 'spieler_entdeckt_spot',
            },
        ),
        migrations.CreateModel(
            name='Spot',
            fields=[
                ('spot_id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=8)),
                ('bezeichnung', models.CharField(max_length=45)),
                ('beschreibung', models.CharField(max_length=255)),
                ('laengengrad', models.CharField(max_length=20)),
                ('breitengrad', models.CharField(max_length=20)),
                ('bewertung', models.IntegerField(blank=True, null=True)),
                ('ort_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ctsapp.Ort')),
                ('schwierigkeit_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ctsapp.Schwierigkeit')),
            ],
            options={
                'managed': True,
                'db_table': 'spot',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=45)),
            ],
            options={
                'managed': True,
                'db_table': 'team',
            },
        ),
        migrations.AddField(
            model_name='spielerentdecktspot',
            name='spot_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ctsapp.Spot'),
        ),
        migrations.AddField(
            model_name='spielerbewertetspot',
            name='spot_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ctsapp.Spot'),
        ),
        migrations.AddField(
            model_name='medium',
            name='spot_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ctsapp.Spot'),
        ),
        migrations.AddField(
            model_name='gamemasterverwaltetspot',
            name='spot_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ctsapp.Spot'),
        ),
        migrations.AddField(
            model_name='spieler',
            name='ort_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ctsapp.Ort'),
        ),
        migrations.AddField(
            model_name='spieler',
            name='team_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ctsapp.Team'),
        ),
        migrations.AddField(
            model_name='spieler',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='spielerentdecktspot',
            unique_together={('spieler_id', 'spot_id')},
        ),
        migrations.AlterUniqueTogether(
            name='spielerbewertetspot',
            unique_together={('spieler_id', 'spot_id')},
        ),
        migrations.AlterUniqueTogether(
            name='gamemasterverwaltetspot',
            unique_together={('spieler_id', 'spot_id')},
        ),
    ]
